<style>
      #guide #profile {margin: 50px;}
      #guide #edit-profile {max-width: 820px !important}
      #guide #edit-profile a {color: #ffffff;}
      #guide #profile #edit-profile #image-upload {width: 100%;}
      #guide .ballot-section {width: 840px; float: left; margin: 40px auto 20px;}
      #guide .ballot-section.half {width: 420px;}
      #guide .ballot-section .sectionheading {font-size: 16px;}
      #guide .ballot-section .sectionheading a {color: #ffffff;}
      #guide .ballot-section .sectionheading:before {content: "";}
      #guide .input {float: left; text-align: left; width: 60%;}
      #guide .blurb {float: right; text-align: left; width: 60%; margin-right: 20px; font-size: 14px;}
      #guide input[type="text"], #guide select, #guide textarea {width: 60%; font-size: 16px; display: inline-block; margin: 0px 0px 10px 0px; border-radius: 4px; background-clip: padding-box; padding: 5px; outline: none; box-shadow: inset 0 0px 4px 0 rgba(0, 0, 0, 0.25); border: 1px solid #c2c2b5; color: #5b5b5b;}
      #guide input[type="checkbox"] {width: auto !important;}
      #guide label {display: inline-block; float: left; text-align: right; margin-right: 30px; width: 33%; color: #ffffff;}
      #guide input[type="submit"] {margin: 0px auto !important;} 
      #guide select {margin-left: 7px;}
      #guide .mce-tinymce {margin-top: 10px;}
      #guide .comments {width: 90%; margin: 0px auto;}
      #guide td {padding: 10px;}
</style>
<% 
  def false_if_blank(obj)
    if obj.nil? || !obj
      return false
    end
    return obj
  end

  def false_if_blank_quote(obj)
    if obj.nil? || !obj
      return false
    end
    return ('"' + obj.gsub('"', '\"') + '"').html_safe
  end
%>

<script>
  blocks = {};
  <% @blocks.each do |block| %>
    blocks[<%= block.id %>] = {};
    blocks[<%= block.id %>]['id'] = <%= block.id %>;
    blocks[<%= block.id %>]['guide_id'] = <%= false_if_blank(block.guide_id) %>;
    blocks[<%= block.id %>]['option_id'] = <%= false_if_blank(block.option_id) %>;
    blocks[<%= block.id %>]['user_option_id'] = <%= false_if_blank(block.user_option_id) %>;
    blocks[<%= block.id %>]['title'] = <%= false_if_blank_quote(block.title) %>;
    blocks[<%= block.id %>]['content'] = <%= false_if_blank_quote(block.content) %>;
    blocks[<%= block.id %>]['order'] = <%= false_if_blank_quote(block.order) %>;
    blocks[<%= block.id %>]['full_size'] = <%= false_if_blank(block.full_size) %>;
  <% end %>

  contests = {};
  <% contests = Hash.new %>
  <% @choices.each do |contest| %>
    <% contests[contest.id] = contest.contest %>
    contests[<%= contest.id %>] = {};
    contests[<%= contest.id %>]['id'] = <%= contest.id %>;
    <% begin %>
      <% if !contest.contest_type.nil? and contest.contest_type == 'Ballot_Statewide' %>
        contests[<%= contest.id %>]['type'] = 'measure';
      <% else %>
        contests[<%= contest.id %>]['type'] = 'contest';
      <% end %>
    <% rescue Exception %> //trying to figure out what the fuck Heroku doesn't like
      <%= contest.to_yaml %>
    <% end %>
    contests[<%= contest.id %>]['title'] = <%= false_if_blank_quote(contest.contest) %>;
    contests[<%= contest.id %>]['state'] = <%= false_if_blank_quote(contest.geography[0,2]) %>;
  <% end %>

  options = {};
  <% options = Hash.new %>
  <% contests_options = Hash.new %>
  <% @options.each do |option| %>
    <% options[option.id] = option.name %>
    <% contests_options[option.id] = option.choice_id %>
    options[<%= option.id %>] = {};
    options[<%= option.id %>]['id'] = <%= option.id %>;
    options[<%= option.id %>]['contest_id'] = <%= false_if_blank(option.choice_id) %>;
    options[<%= option.id %>]['name'] = <%= false_if_blank_quote(option.name) %>;
    options[<%= option.id %>]['blurb'] = <%= false_if_blank_quote(option.blurb) %>;
  <% end %>
</script>

<% 
  user_option_ids = Hash.new
  contests_writeins = Hash.new
  @writeins.each do |writein|
    user_option_ids[writein.id] = writein.name
    contests_writeins[writein.id] = contests[writein.choice_id]
  end
%>

<div id="guide">
  <h1><%= t("guide.editing") %> 
  <% if @guide.name.nil? %>
    <%= t('guide.guide_no') %>
    <%= @guide.id %>
  <% else %>
    <%= @guide.name %>
  <% end %>
  </h1>

  <div id="profile">
    <div id="edit-profile">
        <%= render 'form' %>
      </div>
    </div>
    <div id="sortable">
      <% @blocks.each do |block| %>
<% 
  halfwidth = ''
  if !block.full_size.nil? and !block.full_size
    halfwidth = ' half'
  end

  if block.option_id.nil? and !block.user_option_id.nil?
    contest_name = contests_writeins[block.user_option_id]
    subtitle = user_option_ids[block.user_option_id]
  elsif !block.option_id.nil?
    contest_name = contests[contests_options[block.option_id]]
    subtitle = options[block.option_id]
  elsif !block.title.nil?
    contest_name = block.title.html_safe
    subtitle = false
  end
%>

<div class="ballot-section<%= halfwidth %>">
  <div class="sectionheading">
    <h1 style="background: #D37A3C; padding: 10px;"><%= contest_name %></h1><br>
    <% if subtitle %>
      <h2 class="writein_name"><%= subtitle %></h2><br>
    <% end %>

    <% if !block.content.nil? %>
      <p style="text-align: left; padding: 0 40px;"><%= block.content.html_safe %></p>
    <% end %>

    <p style="font-size: 12px;">
      <%= link_to(t('guide.block_edit'), block_edit_path(block)) %> | 
      <% if !block.full_size.nil? and !block.full_size %>
        <%= link_to(t('guide.block_expand'), block_half_path(block), :method => :post) %> | 
      <% else %>
        <%= link_to(t('guide.block_half'), block_half_path(block), :method => :post) %> | 
      <% end %>
      <%= link_to(t('guide.block_delete'), block_delete_path(block), :method => :post, :confirm => t('guide.delete_confirm')) %>
    </p>
  </div>
</div>
      <% end %>

      <div style="clear: both; float: none;"></div>
    </div>

    <div class="ballot-section">
      <div class="sectionheading">
        <h1 style="background: #D37A3C; padding: 10px;" class=""><%= t('guide.block_add'); %></h1><br>
        <ul>
          <li><h2><%= link_to(t('guide.block_measure'), "javascript:type('measure');", :class => 'swap') %></h2></li>
          <li><h2><%= link_to(t('guide.block_contest'), "javascript:type('contest');", :class => 'swap') %></h2></li>
          <li><h2><%= link_to(t('guide.block_html'), "javascript:type('html');", :class => 'swap') %></h2></li>
        </ul>  

        <div id="contest">
        <%= form_tag(block_create_path, :method => :post) do %>
          <%= hidden_field_tag(:guide_id, @guide.id) %>
          <%= hidden_field_tag(:full_size, true) %>
          <div class="title">
            <%= label_tag(:title, t('guide.block_title')) %>
            <%= text_field_tag(:title) %>
          </div>
          <div class="states">
            <%= label_tag(:state, t('guide.block_state')) %>
            <div class="input"><%= select_tag 'state' %></div>
          </div>
          <div class="contest_select">
            <%= label_tag(:contest_id, t('guide.block_contest')) %>
            <div class="input">
              <%= select_tag 'contest_id' %>
            </div>
          </div>
          <div class="option_select">
            <%= label_tag(:option_id, t('guide.block_option')) %>
            <div class="input"><%= select_tag 'option_id' %></div>
            <div style="margin-bottom: 10px; float: right;"><div id="blurb"></div></div>
            <div class="writein" style="clear: both; font-size: 12px;"><%= link_to(t('guide.writein'), 'javascript:writein();') %> </div>
            </div>
          <div class="custom_option">
            <%= label_tag(:custom_name, t('guide.writein_name')) %>
            <div class="input" style="margin-left: 7px;"><%= text_field_tag(:custom_name) %></div><br>
          </div>
          <div class="comments">
            <p align="center"><%= t('guide.block_content') %></p>
            <%= text_area_tag(:content) %>
          </div>
          <div style="clear: both; float: none;"></div>
          <div id="image-upload" class="submit">
            <%= link_to(t('guide.block_new_type'), "javascript:reset();") %><br>
            <%= submit_tag(t('site.submit')) %>
          </div>
        <% end %>
        </div>
      </div>
    </div>

    <div style="clear: both; float: none;"></div>

    <%= link_to t("site.back"), profile_path(@user), :class => 'button' %>
</div>

    <script>
      typename = false;

      jQuery(document).ready(function() {
        reset();
      });

      jQuery('select[name="state"]').change(function() {
        disable_contests();
        enable_contest($(this).val());
      });

      jQuery('select[name="contest_id"]').change(function() {
        disable_options();
        enable_option($(this).val());
      });

      function load_blocks() {
        
      }

      function reset() {
        jQuery('select[name="state"]').val(0);
        enable_type();
        disable_basics();
        disable_options(); 
        disable_contests();
        disable_measures();
        disable_blurbs();
      }

      function type(the_typename) {
        typename = the_typename

        disable_type();
        enable_basics();
        if (typename != 'html') {
          enable_state();
        } else {
          enable_title();
        }
      }

      function disable_type() {
        jQuery('.swap').hide();
      }

      function enable_type() {
        jQuery('.swap').show();
        typename = false;
      }

      function disable_basics() {
        jQuery('.title').hide();
        jQuery('.title input').attr('disabled', 'disabled');
        jQuery('.states').hide();
        jQuery('.states select').attr('disabled', 'disabled');
        jQuery('.comments').hide();
        jQuery('.comments input').attr('disabled', 'disabled');
        jQuery('.submit').hide();
        jQuery('.submit input').attr('disabled', 'disabled');
      }

      function disable_contests() {
        jQuery('.contest_select').hide();
        jQuery('.contest_select select').attr('disabled', 'disabled');
      }

      function disable_measures() {
        jQuery('.measure_select').hide();
        jQuery('.measure_select select').attr('disabled', 'disabled');
      }

      function disable_blurbs() {
        jQuery('#blurb').hide();
      }

      function disable_options() {
        jQuery('.option_select').hide();
        jQuery('.option_select select').attr('disabled', 'disabled');
        jQuery('.custom_option').hide();
        jQuery('.custom_option input').attr('disabled', 'disabled');
        writein_control();
      }

      function enable_blurb(contest_options, about) {
        jQuery('#blurb').html('');
        html = '<table style="height: 0px; margin: 0 40px; text-align: left; color: #5b5b5b; background: #fff;" cellspacing="10" class="hidden"><tbody>';
            for(i = 0; i < contest_options.length; i++) {
              color = 'red';
              if (contest_options[i].name == 'Yes') color = 'green';
              html += '<tr><td style="color: ' + color + '; background: #fff;">' + contest_options[i].name + ':</td>';
                html += '<td>' + contest_options[i].blurb + '</td></tr>';
            }
        html += '</tbody></tr></table>';
        jQuery('#blurb').append(html).show();
      }

      function writein_control() {
        if(typename == 'contest') {
          jQuery('.writein').show().css('display', 'block');
        } else {
          jQuery('.writein').hide().css('display', 'none');
        }
      }

      function enable_contest(state) {
        jQuery('select[name="contest_id"]').html('').append('<option value=0><%= t("guide.select_contest") %></option>');      
        contest_keys = get_keys(contests);
        contest_options = [];

        for(i = 0; i < contest_keys.length; i++) {
          if((contests[contest_keys[i]]['state'] == state) && (contests[contest_keys[i]]['type'] == typename)) contest_options.push(contests[contest_keys[i]]);
        }
        for(i = 0; i < contest_options.length; i++) {
          jQuery('select[name="contest_id"]').append('<option value="' + contest_options[i]['id'] + '">' + contest_options[i]['title'] + '</option>');
        }

        jQuery('.contest_select').show();
        jQuery('select[name="contest_id"]').removeAttr('disabled');
      }


      function enable_option(contest_id) {
        jQuery('select[name="option_id"]').html('').append('<option value=0><%= t("guide.select_option") %></option>');;
        option_keys = get_keys(options);
        options_options = [];

        for(i = 0; i < option_keys.length; i++) {
          if(options[option_keys[i]]['contest_id'] == contest_id) options_options.push(options[option_keys[i]]);
        }
        for(i = 0; i < options_options.length; i++) {
          jQuery('select[name="option_id"]').append('<option value="' + options_options[i]['id'] + '">' + options_options[i]['name'] + '</option>');
        }

        jQuery('.option_select').show();
        jQuery('select[name="option_id"]').removeAttr('disabled');

        if (typename == 'contest') {
          writein_control();
        } else if (typename == 'measure') {
          enable_blurb(options_options);
        }
      }

      function enable_state() {
        jQuery('select[name="state"]').html('').append('<option value=0><%= t("guide.select_state") %></option>');      
        contest_keys = get_keys(contests);
        states = [];
        for(i = 0; i < contest_keys.length; i++) {
          if((!is_included(states, contests[contest_keys[i]]['state'])) && (contests[contest_keys[i]]['type'] == typename)) states.push(contests[contest_keys[i]]['state']);
        }
        states.sort();
        for(i = 0; i < states.length; i++) {
          jQuery('.states select').append('<option value="' + states[i] + '">' + states[i] + '</option>');
        }
        jQuery('.states').show();
        jQuery('.states select').removeAttr('disabled');
      }

      function enable_title() {
        jQuery('.title').show();
        jQuery('.title input').removeAttr('disabled');
      }

      function enable_basics() {
        jQuery('.comments').show();
        jQuery('.comments input').removeAttr('disabled');
        jQuery('.submit').show();
        jQuery('.submit input').removeAttr('disabled');
      }

      function writein() {
        disable_options();
        jQuery('.custom_option').show();
        jQuery('.custom_option input').removeAttr('disabled');
      }

      function is_included(arr, obj) {
        return (arr.indexOf(obj) != -1);
      }

      function get_keys(dictionary) {
        var keys = [];
        for (var key in dictionary) {
          if (dictionary.hasOwnProperty(key)) {
            keys.push(key);
          }
        }
        return keys;
      }

      tinyMCE.init({mode : "textareas", menubar: false, theme: 'modern', skin: 'light'});
    </script>
